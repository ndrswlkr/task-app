export * from '@mojojs/util';
declare type EscapeFunction = (text: string) => string;
declare type TemplateFunction = (data?: Record<string, any>) => Promise<string>;
interface TemplateOptions {
    escape?: EscapeFunction;
    name?: string;
}
interface Source {
    lines: string[];
    name: string;
}
/**
 * Template class.
 */
export default class Template {
    _escape: EscapeFunction;
    _fn: TemplateFunction | undefined;
    _source: Source;
    constructor(template: string | Template, options?: TemplateOptions);
    /**
     * Compile template to an async function.
     */
    compile(): TemplateFunction;
    /**
     * Render template.
     */
    render(data?: Record<string, any>): Promise<string>;
    /**
     * Render template.
     */
    static render(template: string | Template, data?: Record<string, any>, options?: TemplateOptions): Promise<string>;
    _compileFn(code: string, escape: EscapeFunction, source: Source): TemplateFunction;
}
export declare function tmpl(strings: string[], ...values: string[]): Template;
