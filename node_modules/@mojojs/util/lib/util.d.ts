/// <reference types="node" />
export declare type JSONValue = string | number | boolean | null | JSONValue[] | {
    [key: string]: JSONValue;
};
export declare type JSONObject = {
    [key: string]: JSONValue;
};
declare type Hook = (...args: any[]) => any;
interface URLParts {
    authority: string;
    fragment: string;
    path: string;
    query: string;
    scheme: string;
}
/**
 * Safe string that should not be escaped.
 */
export declare class SafeString extends String {
}
/**
 * AbortController exception class.
 */
export declare class AbortError extends Error {
    constructor(message?: string);
}
/**
 * Async hook class.
 */
export declare class AsyncHooks {
    _hooks: Record<string, Hook[]>;
    /**
     * Add hook.
     */
    addHook(name: string, fn: Hook): void;
    /**
     * Run hook.
     */
    runHook(name: string, ...args: any[]): Promise<any>;
    _prepareHook(chain: Hook[]): (...args: any[]) => Promise<any>;
}
/**
 * Capture STDOUT/STDERR output.
 */
export declare function captureOutput(fn: () => Promise<void> | void, options?: {
    stderr?: boolean;
    stdout?: boolean;
}): Promise<Buffer>;
/**
 * CSS unescape string.
 */
export declare function cssUnescape(value: string): string;
/**
 * Decode URI component, but do not throw an exception if it fails.
 */
export declare function decodeURIComponentSafe(value: string): string | null;
/**
 * Escape string for use in a regular expression.
 */
export declare function escapeRegExp(string: string): string;
/**
 * JSON pointers.
 */
export declare function jsonPointer(value: JSONValue, pointer: string): JSONValue | undefined;
/**
 * Helper function for sticky regex matching.
 */
export declare function stickyMatch(stringWithOffset: {
    offset: number;
    value: string;
}, stickyRegex: RegExp): RegExpMatchArray | null;
/**
 * Tablify data structure.
 */
export declare function tablify(rows?: string[][]): string;
/**
 * Escape all POSIX control characters except for `\n`.
 */
export declare function termEscape(value: string): string;
/**
 * Split URL with the official regular expression.
 */
export declare function urlSplit(url: string): URLParts | null;
/**
 * XML escape string, but exclude `SafeString` objects.
 */
export declare function xmlEscape(value: string | SafeString): string;
/**
 * XML unescape string.
 */
export declare function xmlUnescape(value: string): string;
export {};
