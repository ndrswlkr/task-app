import type { Child } from '../types.js';
import { ChildNode } from './child.js';
/**
 * Base class for nodes with children.
 */
export declare class ParentNode extends ChildNode {
    /**
     * Child nodes.
     */
    childNodes: Child[];
    /**
     * Append a child node to this parent node.
     */
    appendChild(node: Child): void;
    /**
     * Clone this node.
     */
    clone(): ParentNode;
    /**
     * Insert a child node to this parent node after the given reference node.
     */
    insertAfter(node: Child, referenceNode: Child): void;
    /**
     * Insert a child node to this parent node before the given reference node.
     */
    insertBefore(node: Child, referenceNode: Child): void;
    /**
     * Insert text into this parent node. If the last child is a text node, the text will be appended to the text node
     * content. Otherwise, insert a new text node with the given text.
     */
    insertText(text: string): void;
    /**
     * Insert text into a sibling node that goes before the reference node. If the sibling node is a text node, the
     * provided text will be appended to the text node content. Otherwise, insert a new sibling text node with the given
     * text before the reference node.
     */
    insertTextBefore(text: string, referenceNode: Child): void;
    /**
     * Prepend a child node to this parent node.
     */
    prependChild(node: Child): void;
    /**
     * Render node to string.
     */
    toString(options?: {
        xml: boolean;
    }): string;
    _insertNode(node: Child, referenceNode: Child, offset: number): void;
}
