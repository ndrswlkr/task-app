/**
 * Base class for nodes that might have parents.
 */
export class ChildNode {
    constructor() {
        /**
         * Node type.
         */
        this.nodeType = '#none';
        /**
         * Parent node.
         */
        this.parentNode = null;
    }
    /**
     * Ancestor elements of this node.
     */
    ancestors() {
        const ancestors = [];
        let current = this.parentNode;
        while (current !== null && current.nodeType === '#element') {
            ancestors.push(current);
            current = current.parentNode;
        }
        return ancestors;
    }
    /**
     * Clone this node.
     */
    clone() {
        return new ChildNode();
    }
    /**
     * Remove this node from its parent node.
     */
    detach() {
        if (this.parentNode !== null) {
            const idx = this.parentNode.childNodes.indexOf(this);
            this.parentNode.childNodes.splice(idx, 1);
            this.parentNode = null;
        }
    }
    /**
     * Root node.
     */
    root() {
        let parent = this;
        while (parent.parentNode !== null) {
            parent = parent.parentNode;
        }
        return parent;
    }
    /**
     * Sibling elements of this node.
     */
    siblings() {
        const siblings = { following: [], preceding: [] };
        const parent = this.parentNode;
        if (parent === null)
            return siblings;
        let active = siblings.preceding;
        for (const sibling of parent.childNodes) {
            if (sibling.nodeType !== '#element')
                continue;
            if (sibling === this) {
                active = siblings.following;
                continue;
            }
            active.push(sibling);
        }
        return siblings;
    }
    /**
     * Render node to string.
     */
    toString() {
        return '';
    }
}
//# sourceMappingURL=child.js.map