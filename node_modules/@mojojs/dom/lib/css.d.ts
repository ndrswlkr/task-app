import type { ElementNode } from './nodes/element.js';
import type { Parent } from './types.js';
interface Attribute {
    name: RegExp;
    type: 'attr';
    value: RegExp | null;
}
interface Tag {
    name: RegExp | null;
    type: 'tag';
}
interface PseudoClassIsNot {
    class: 'is' | 'not';
    type: 'pc';
    value: SelectorList;
}
interface PseudoClassNth {
    class: 'nth-child' | 'nth-last-child' | 'nth-of-type' | 'nth-last-of-type';
    type: 'pc';
    value: [number, number];
}
interface PseudoClassPlain {
    class: 'any-link' | 'checked' | 'empty' | 'link' | 'only-child' | 'only-of-type' | 'root' | 'visited';
    type: 'pc';
}
interface PseudoClassText {
    class: 'text';
    type: 'pc';
    value: RegExp;
}
type PseudoClass = PseudoClassIsNot | PseudoClassNth | PseudoClassPlain | PseudoClassText;
type SimpleSelector = Attribute | Tag | PseudoClass;
interface Combinator {
    type: 'combinator';
    value: string;
}
interface CompoundSelector {
    type: 'compound';
    value: SimpleSelector[];
}
type ComplexSelector = Array<Combinator | CompoundSelector>;
type SelectorList = ComplexSelector[];
export declare class Selector {
    _ast: SelectorList;
    constructor(selector: string);
    all(tree: Parent): ElementNode[];
    first(tree: Parent): ElementNode | null;
    matches(tree: ElementNode): boolean;
}
export {};
