import type { DoctypeNode } from './nodes/doctype.js';
import type { Child, Parent } from './types.js';
import { CommentNode } from './nodes/comment.js';
import { DocumentNode } from './nodes/document.js';
import { ElementNode } from './nodes/element.js';
import { FragmentNode } from './nodes/fragment.js';
import { TextNode } from './nodes/text.js';
export declare class HTMLParser {
    _adapter: TreeAdapter;
    parse(html: string): DocumentNode;
    parseFragment(html: string): FragmentNode;
}
declare class TreeAdapter {
    createDocument(): DocumentNode;
    createDocumentFragment(): FragmentNode;
    createElement(tagName: string, namespaceUri: string, attrsArray: Array<{
        name: string;
        value: string;
    }>): ElementNode;
    createCommentNode(data: string): CommentNode;
    createTextNode(value: string): TextNode;
    appendChild(parentNode: Parent, newNode: Child): void;
    insertBefore(parentNode: Parent, newNode: Child, referenceNode: Child): void;
    setTemplateContent(templateElement: ElementNode, contentElement: FragmentNode): void;
    getTemplateContent(templateElement: ElementNode): FragmentNode | null;
    setDocumentType(document: DocumentNode, name: string, publicId: string, systemId: string): void;
    setDocumentMode(document: DocumentNode, mode: string): void;
    getDocumentMode(document: DocumentNode): string;
    detachNode(node: Child): void;
    insertText(parentNode: Parent, text: string): void;
    insertTextBefore(parentNode: Parent, text: string, referenceNode: Child): void;
    adoptAttributes(recipient: ElementNode, attrs: Array<{
        name: string;
        value: string;
    }>): void;
    getFirstChild(node: Parent): Child;
    getChildNodes(node: Parent): Child[];
    getParentNode(node: ElementNode): Parent | null;
    getAttrList(element: ElementNode): Array<{
        name: string;
        value: string;
    }>;
    getTagName(element: ElementNode): string;
    getNamespaceURI(element: ElementNode): string;
    getTextNodeContent(textNode: TextNode): string;
    getCommentNodeContent(commentNode: CommentNode): string;
    getDocumentTypeNodeName(doctypeNode: DoctypeNode): string;
    getDocumentTypeNodePublicId(doctypeNode: DoctypeNode): string;
    getDocumentTypeNodeSystemId(doctypeNode: DoctypeNode): string;
    isTextNode(node: Child): boolean;
    isCommentNode(node: Child): boolean;
    isDocumentTypeNode(node: Child): boolean;
    isElementNode(node: Child): boolean;
    setNodeSourceCodeLocation(): void;
    getNodeSourceCodeLocation(): any;
    updateNodeSourceCodeLocation(): void;
}
export {};
