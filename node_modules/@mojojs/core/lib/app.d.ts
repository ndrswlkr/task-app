import type { Route } from './router/route.js';
import type { AnyArguments, AppOptions, UserAgentOptions, MojoAction, MojoContext, MojoModels, RouteArguments, ServerOptions, TestUserAgentOptions } from './types.js';
import { CLI } from './cli.js';
import { Hooks } from './hooks.js';
import { Logger } from './logger.js';
import { Mime } from './mime.js';
import { Renderer } from './renderer.js';
import { Router } from './router.js';
import { ServerRequest } from './server/request.js';
import { ServerResponse } from './server/response.js';
import { Session } from './session.js';
import { Static } from './static.js';
import { UserAgent } from './user-agent.js';
import { MockUserAgent } from './user-agent/mock.js';
import { TestUserAgent } from './user-agent/test.js';
import { Validator } from './validator.js';
import Path from '@mojojs/path';
type AppHook = (app: App, ...args: any[]) => any;
type ContextHook = (app: MojoContext, ...args: any[]) => any;
type Decoration = ((...args: any[]) => any) | {
    get?: () => any;
    set?: (value: any) => any;
};
/**
 * Application class.
 */
export declare class App {
    /**
     * Command line interface.
     */
    cli: CLI;
    /**
     * Application config.
     */
    config: Record<string, any>;
    /**
     * Default stash values.
     */
    defaults: Record<string, any>;
    /**
     * Detect if the application has been imported and disable the command line interface if it has.
     */
    detectImport: boolean;
    /**
     * Format for HTTP exceptions ("html", "json", or "txt").
     */
    exceptionFormat: string;
    /**
     * Application hooks.
     */
    hooks: Hooks;
    /**
     * Application home directory.
     */
    home: Path;
    /**
     * Application logger.
     */
    log: Logger;
    /**
     * MIME types.
     */
    mime: Mime;
    /**
     * Operating mode for application. Defaults to the value of the `NODE_ENV` environment variable.
     */
    mode: string;
    /**
     * Storage for user defined models.
     */
    models: MojoModels;
    /**
     * Application renderer.
     */
    renderer: Renderer;
    /**
     * Application router.
     */
    router: Router;
    /**
     * Rotating secret passphrases used for signed cookies and the like.
     */
    secrets: string[];
    /**
     * Encrypted cookie based session manager.
     */
    session: Session;
    /**
     * Static file server.
     */
    static: Static;
    /**
     * HTTP/WebSocket user agent.
     */
    ua: UserAgent;
    /**
     * JSON schema validator.
     */
    validator: Validator;
    _contextClass: any;
    constructor(options?: AppOptions);
    /**
     * Add an application hook to extend the framework.
     */
    addAppHook(name: string, fn: AppHook): this;
    /**
     * Add a context hook to extend the framework.
     */
    addContextHook(name: string, fn: ContextHook): this;
    /**
     * Add a helper.
     */
    addHelper(name: string, fn: MojoAction): this;
    /**
     * Generate route matching any of the listed HTTP request methods or all.
     */
    any(...args: AnyArguments): Route;
    /**
     * Decorate context class with a method or getter/setter.
     */
    decorateContext(name: string, fn: Decoration): this;
    /**
     * Generate route matching only `DELETE` requests.
     */
    delete(...args: RouteArguments): Route;
    /**
     * Generate route matching only `GET` requests.
     */
    get(...args: RouteArguments): Route;
    /**
     * Handle a new incoming request, used by servers.
     */
    handleRequest(ctx: MojoContext): Promise<void>;
    /**
     * Create a context for application.
     */
    newContext(req: ServerRequest, res: ServerResponse): MojoContext;
    /**
     * Create a mock context for application. Very useful for testing helpers.
     */
    newMockContext(options?: {
        headers?: string[];
        method?: string;
        url?: string;
    }): MojoContext;
    /**
     * Create a new mock user agent for application.
     */
    newMockUserAgent(options?: UserAgentOptions, serverOptions?: ServerOptions): Promise<MockUserAgent>;
    /**
     * Create a new test user agent for application.
     */
    newTestUserAgent(options?: TestUserAgentOptions, serverOptions?: ServerOptions): Promise<TestUserAgent>;
    /**
     * Generate route matching only `OPTIONS` requests.
     */
    options(...args: RouteArguments): Route;
    /**
     * Generate route matching only `PATCH` requests.
     */
    patch(...args: RouteArguments): Route;
    /**
     * Register plugin.
     */
    plugin<T>(plugin: (app: App, options: Record<string, any>) => T, options?: Record<string, any>): T;
    /**
     * Generate route matching only `POST` requests.
     */
    post(...args: RouteArguments): Route;
    /**
     * Generate route matching only `PUT` requests.
     */
    put(...args: RouteArguments): Route;
    /**
     * Start the command line interface.
     */
    start(command?: string, ...args: string[]): Promise<void>;
    /**
     * Generate route for a nested route with its own intermediate destination.
     */
    under(...args: AnyArguments): Route;
    /**
     * Warmup the cache, usually called automatically.
     */
    warmup(): Promise<void>;
    /**
     * Generate route matching only WebSocket handshake requests.
     */
    websocket(...args: RouteArguments): Route;
}
export {};
