import { Pattern } from './pattern.js';
/**
 * Route class.
 */
export class Route {
    constructor() {
        /**
         * The children of this route, used for nesting routes.
         */
        this.children = [];
        /**
         * Custom route name, if defined.
         */
        this.customName = undefined;
        /**
         * Default route name.
         */
        this.defaultName = undefined;
        /**
         * Allow `under` semantics for this route.
         */
        this.underRoute = false;
        /**
         * Restrict HTTP methods this route is allowed to handle, defaults to no restrictions.
         */
        this.methods = [];
        /**
         * Pattern for this route.
         */
        this.pattern = new Pattern();
        /**
         * Activate conditions for this route.
         */
        this.requirements = [];
        /**
         * Activate `websocket` semantics for this route.
         */
        this.websocketRoute = false;
        this._parent = undefined;
        this._root = undefined;
    }
    /**
     * Add a child to this route.
     */
    addChild(child) {
        this.children.push(child);
        child.remove().parent = this;
        child.root = this.root;
        return child;
    }
    /**
     * Generate route matching any of the listed HTTP request methods or all.
     */
    any(...args) {
        const child = new Route();
        const childPattern = child.pattern;
        for (const arg of args) {
            if (typeof arg === 'string') {
                child.defaultName = arg.replace(/[^0-9a-z]+/gi, '_').replace(/^_|_$/g, '');
                childPattern.parse(arg);
            }
            else if (Array.isArray(arg)) {
                child.methods = arg;
            }
            else if (typeof arg === 'function') {
                childPattern.defaults.fn = arg;
            }
            else if (typeof arg === 'object' && arg !== null) {
                Object.assign(childPattern.constraints, arg);
            }
        }
        childPattern.types = this.root?.types ?? {};
        return this.addChild(child);
    }
    /**
     * Generate route matching only `DELETE` requests.
     */
    delete(...args) {
        return this.any(['DELETE'], ...args);
    }
    /**
     * Generate route matching only `GET` requests.
     */
    get(...args) {
        return this.any(['GET'], ...args);
    }
    /**
     * Check if this route has a WebSocket ancestor and cache the result for future checks.
     */
    hasWebSocket() {
        return this._branch()
            .map(route => route.websocketRoute)
            .includes(true);
    }
    /**
     * Check if this route qualifies as an endpoint.
     */
    isEndpoint() {
        return this.children.length === 0;
    }
    /**
     * The name of this route, defaults to an automatically generated name based on the route pattern. Note that the name
     * `current` is reserved for referring to the current route.
     */
    name(name) {
        this.customName = name;
        return this;
    }
    /**
     * Generate route matching only `OPTIONS` requests.
     */
    options(...args) {
        return this.any(['OPTIONS'], ...args);
    }
    /**
     * The parent of this route.
     */
    get parent() {
        return this._parent?.deref();
    }
    set parent(parent) {
        this._parent = parent === undefined ? undefined : new WeakRef(parent);
    }
    /**
     * Generate route matching only `PATCH` requests.
     */
    patch(...args) {
        return this.any(['PATCH'], ...args);
    }
    /**
     * Generate route matching only `POST` requests.
     */
    post(...args) {
        return this.any(['POST'], ...args);
    }
    /**
     * Generate route matching only `PUT` requests.
     */
    put(...args) {
        return this.any(['PUT'], ...args);
    }
    /**
     * Remove route from parent.
     */
    remove() {
        const parent = this.parent;
        if (parent === undefined)
            return this;
        this.parent = undefined;
        parent.children = parent.children.filter(route => route !== this);
        return this;
    }
    /**
     * Render route with parameters into a path.
     */
    render(values = {}) {
        const parts = [];
        const branch = this._branch();
        for (let i = 0; i < branch.length - 1; i++) {
            const route = branch[i];
            parts.push(route.pattern.render(values, { isEndpoint: route.isEndpoint() }));
        }
        return parts.reverse().join('');
    }
    /**
     * Activate conditions for this route. Note that this automatically disables the routing cache, since conditions are
     * too complex for caching.
     */
    requires(condition, requirement) {
        const root = this.root;
        if (root === undefined)
            return this;
        this.requirements.push({ condition, requirement });
        root.cache = null;
        return this;
    }
    /**
     * Return the `Router` object this route is a descendant of.
     */
    get root() {
        return this._root?.deref();
    }
    set root(root) {
        this._root = root === undefined ? undefined : new WeakRef(root);
    }
    /**
     * Suggested HTTP method for reaching this route, `GET` and `POST` are preferred.
     */
    suggestedMethod() {
        const suggestions = [];
        for (const route of this._branch()) {
            const methods = route.methods;
            if (methods.length <= 0)
                continue;
            suggestions.push(...(suggestions.length > 0 ? suggestions.filter(method => methods.includes(method)) : methods));
        }
        const hasGet = suggestions.includes('GET');
        if (suggestions.includes('POST') === true && hasGet === false)
            return 'POST';
        return hasGet === true ? 'GET' : suggestions[0] ?? 'GET';
    }
    /**
     * Set default parameters for this route.
     */
    to(...targets) {
        const defaults = this.pattern.defaults;
        for (const target of targets) {
            if (typeof target === 'string') {
                const parts = target.split('#');
                if (parts[0] !== '')
                    defaults.controller = parts[0];
                if (parts.length > 1 && parts[1] !== '')
                    defaults.action = parts[1];
            }
            else if (typeof target === 'function') {
                defaults.fn = target;
            }
            else {
                Object.assign(defaults, target);
            }
        }
        return this;
    }
    /**
     * Generate route for a nested route with its own intermediate destination.
     */
    under(...args) {
        const child = this.any(...args);
        child.underRoute = true;
        return child;
    }
    /**
     * Generate route matching only WebSocket handshake requests.
     */
    websocket(...args) {
        const child = this.any(...args);
        child.websocketRoute = true;
        return child;
    }
    _branch() {
        const branch = [this];
        let current = branch[0];
        while ((current = current.parent) !== undefined) {
            branch.push(current);
        }
        return branch;
    }
}
//# sourceMappingURL=route.js.map