/// <reference types="node" />
import type { App } from './app.js';
import type { ChildLogger } from './logger.js';
import type { Plan } from './router/plan.js';
import type { ServerRequest } from './server/request.js';
import type { ServerResponse } from './server/response.js';
import type { SessionData } from './types.js';
import type { MojoAction, MojoModels, MojoRenderOptions, MojoURLOptions, ValidatorFunction } from './types.js';
import type { UserAgent } from './user-agent.js';
import type { WebSocket } from './websocket.js';
import type Path from '@mojojs/path';
import type { BusboyConfig } from 'busboy';
import EventEmitter from 'node:events';
import { Params } from './body/params.js';
import { SafeString } from './util.js';
type WebSocketHandler = (ws: WebSocket) => void | Promise<void>;
interface ContextEvents {
    connection: (ws: WebSocket) => void;
    finish: () => void;
}
declare interface Context {
    on: <T extends keyof ContextEvents>(event: T, listener: ContextEvents[T]) => this;
    emit: <T extends keyof ContextEvents>(event: T, ...args: Parameters<ContextEvents[T]>) => boolean;
}
/**
 * Context class.
 */
declare class Context extends EventEmitter {
    /**
     * Application this context belongs to.
     */
    app: App;
    /**
     * Partial content.
     */
    content: Record<string, string>;
    /**
     * Format for HTTP exceptions ("html", "json", or "txt").
     */
    exceptionFormat: string;
    /**
     * WebSocket JSON mode.
     */
    jsonMode: boolean;
    /**
     * Logger with request id.
     */
    log: ChildLogger;
    /**
     * Router dispatch plan.
     */
    plan: Plan | null;
    /**
     * HTTP request information.
     */
    req: ServerRequest;
    /**
     * HTTP response information.
     */
    res: ServerResponse;
    /**
     * Non-persistent data storage and exchange for the current request.
     */
    stash: Record<string, any>;
    _flash: SessionData | undefined;
    _params: Params | undefined;
    _session: Record<string, any> | undefined;
    _ws: WeakRef<WebSocket> | null;
    constructor(app: App, req: ServerRequest, res: ServerResponse);
    [EventEmitter.captureRejectionSymbol](error: Error): void;
    /**
     * Select best possible representation for resource.
     */
    accepts(allowed?: string[]): string[] | null;
    /**
     * Application config shortcut.
     */
    get config(): Record<string, any>;
    /**
     * Append partial content to `ctx.content` buffers.
     */
    contentFor(name: string, content: string | SafeString): Promise<void>;
    /**
     * Data storage persistent only for the next request.
     */
    flash(): Promise<Record<string, any>>;
    /**
     * Handle WebSocket upgrade, used by servers.
     */
    handleUpgrade(ws: WebSocket): void;
    /**
     * Home directory shortcut.
     */
    get home(): Path;
    /**
     * Check if WebSocket connection has been accepted.
     */
    get isAccepted(): boolean;
    /**
     * Check if WebSocket connection has been established.
     */
    get isEstablished(): boolean;
    /**
     * Check if session is active.
     */
    get isSessionActive(): boolean;
    /**
     * Check if HTTP request is a WebSocket handshake.
     */
    get isWebSocket(): boolean;
    /**
     * Accept WebSocket connection and activate JSON mode.
     */
    json(fn: WebSocketHandler): this;
    /**
     * Model shortcut.
     */
    get models(): MojoModels;
    /**
     * GET and POST parameters.
     * @example
     * // Get a specific parameter
     * const params = await ctx.params();
     * const foo = params.get('foo');
     */
    params(options?: BusboyConfig): Promise<Params>;
    /**
     * Accept WebSocket connection.
     */
    plain(fn: WebSocketHandler): this;
    /**
     * Send `302` redirect response.
     */
    redirectTo(target: string, options?: MojoURLOptions & {
        status?: number;
    }): Promise<void>;
    /**
     * Render dynamic content.
     * @example
     * // Render text
     * await ctx.render({text: 'Hello World!'});
     *
     * // Render JSON
     * await ctx.render({json: {hello: 'world'}});
     *
     * // Render view "users/list.*.*" and pass it a stash value
     * await ctx.render({view: 'users/list'}, {foo: 'bar'});
     */
    render(options?: MojoRenderOptions, stash?: Record<string, any>): Promise<boolean>;
    /**
     * Try to render dynamic content to string.
     */
    renderToString(options: MojoRenderOptions, stash?: Record<string, any>): Promise<string | null>;
    /**
     * Automatically select best possible representation for resource.
     */
    respondTo(spec: Record<string, MojoAction | MojoRenderOptions>): Promise<void>;
    /**
     * Send static file.
     */
    sendFile(file: Path): Promise<void>;
    /**
     * Get JSON schema validation function.
     */
    schema(schema: Record<string, any> | string): ValidatorFunction;
    /**
     * Persistent data storage for the next few requests.
     */
    session(): Promise<SessionData>;
    /**
     * HTTP/WebSocket user agent shortcut.
     */
    get ua(): UserAgent;
    /**
     * Generate URL for route or path.
     * @example
     * // Current URL with query parameter
     * const url = ctx.urlFor('current', {query: {foo: 'bar'}});
     *
     * // URL for route with placeholder values
     * const url = ctx.urlFor('users', {values: {id: 23}});
     *
     * // Absolute URL for path
     * const url = ctx.urlFor('/some/path', {absolute: true});
     */
    urlFor(target?: string, options?: MojoURLOptions): string;
    /**
     * Generate URL for static asset.
     */
    urlForAsset(path: string, options?: MojoURLOptions): string;
    /**
     * Generate URL for static file.
     */
    urlForFile(path: string, options?: MojoURLOptions): string;
    /**
     * Generate URL for route or path and preserve the current query parameters.
     * @example
     * // Remove a specific query parameter
     * const url = ctx.urlWith('current', {query: {foo: null}});
     */
    urlWith(target?: string, options?: MojoURLOptions): string;
    /**
     * Established WebSocket connection.
     */
    get ws(): WebSocket | null;
    _urlForPath(path: string, isWebSocket: boolean, options: MojoURLOptions): string;
}
export { Context };
